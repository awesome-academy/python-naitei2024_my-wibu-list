# Generated by Django 5.1 on 2024-08-14 04:35

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Content',
            fields=[
                ('cid', models.IntegerField(help_text="Content's primary key.", primary_key=True, serialize=False)),
                ('category', models.CharField(choices=[('anime', 'Anime'), ('manga', 'Manga')], default='anime', help_text='Content category', max_length=20, null=True)),
                ('name', models.CharField(help_text='Content name', max_length=255, null=True)),
                ('scoreAvg', models.FloatField(default=0.0, null=True)),
                ('genres', models.CharField(blank=True, help_text="Content's Genres", max_length=255, null=True)),
                ('cType', models.CharField(blank=True, help_text='Manga type (Oneshot, shounen,...)', max_length=255, null=True)),
                ('episodes', models.IntegerField(blank=True, help_text='Number of published chapters.', null=True)),
                ('aired', models.CharField(blank=True, help_text='Publish date.', max_length=255, null=True)),
                ('lastUpdate', models.DateField(blank=True, help_text='Date of last published chapter.', null=True)),
                ('producers', models.CharField(blank=True, help_text='None for Manga.', max_length=500, null=True)),
                ('licensors', models.CharField(blank=True, help_text='Companies that have the rights to translate, publish, and distribute the manga.', max_length=255, null=True)),
                ('studios', models.CharField(blank=True, help_text='Tteams that assist the main artist with tasks.', max_length=255, null=True)),
                ('source', models.CharField(blank=True, help_text='Light novel, Book, etc. (e.g Original).', max_length=255, null=True)),
                ('duration', models.CharField(blank=True, help_text='None for Manga.', max_length=255, null=True)),
                ('rating', models.CharField(blank=True, help_text='Manga age rate (e.g. safe).', max_length=255, null=True)),
                ('ranked', models.IntegerField(default=0, help_text='.', null=True)),
                ('favorites', models.IntegerField(default=0, help_text='Number of user have this manga in their favorite list.', null=True)),
                ('watching', models.IntegerField(default=0, help_text='Reading.', null=True)),
                ('completed', models.IntegerField(default=0, help_text='Completed.', null=True)),
                ('onHold', models.IntegerField(default=0, help_text='On Hold.', null=True)),
                ('dropped', models.IntegerField(default=0, help_text='Dropped.', null=True)),
                ('planToWatch', models.IntegerField(default=0, help_text='Plan to Read.', null=True)),
                ('picture', models.ImageField(blank=True, default=None, help_text='Content cover picture.', null=True, upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('oid', models.IntegerField(help_text='Order id.', primary_key=True, serialize=False)),
                ('orderDate', models.DateField(help_text='Date of the order.', null=True)),
                ('status', models.CharField(help_text='Order status (e.g. Shipped).', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('uid', models.IntegerField(help_text='User id', primary_key=True, serialize=False)),
                ('username', models.CharField(help_text='Username', max_length=255, null=True)),
                ('role', models.CharField(choices=[('admin', 'admin'), ('new_user', 'new_user'), ('longtime_user', 'longtime_user'), ('user', 'user'), ('VIP', 'VIP')], default='new_user', help_text='User role.', max_length=20, null=True)),
                ('email', models.CharField(help_text='Email address', max_length=255, null=True)),
                ('password', models.CharField(help_text='Password', max_length=255, null=True)),
                ('dateOfBirth', models.DateField(blank=True, help_text='Date of birth', null=True)),
                ('profilePicture', models.ImageField(blank=True, help_text='Profile picture', null=True, upload_to='')),
                ('registrationDate', models.DateField(help_text="Account's registration date", null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='customuser_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('pid', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the product.', max_length=255, null=True)),
                ('price', models.FloatField(default=0, help_text="Product's price.", null=True)),
                ('description', models.TextField(blank=True, help_text="Product's description.", max_length=500, null=True)),
                ('ravg', models.FloatField(default=0, help_text="Product's average rating.", null=True)),
                ('picture', models.ImageField(blank=True, help_text="Product's picture.", null=True, upload_to='')),
                ('cid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='wibu_catalog.content')),
            ],
        ),
        migrations.CreateModel(
            name='OrderItems',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1, help_text='Number of ordered products.', null=True)),
                ('buyPrice', models.FloatField(help_text='Price at the time of Ordered.', null=True)),
                ('oid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='wibu_catalog.order')),
                ('pid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='wibu_catalog.product')),
            ],
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score10', models.IntegerField(default=0, null=True)),
                ('score9', models.IntegerField(default=0, null=True)),
                ('score8', models.IntegerField(default=0, null=True)),
                ('score7', models.IntegerField(default=0, null=True)),
                ('score6', models.IntegerField(default=0, null=True)),
                ('score5', models.IntegerField(default=0, null=True)),
                ('score4', models.IntegerField(default=0, null=True)),
                ('score3', models.IntegerField(default=0, null=True)),
                ('score2', models.IntegerField(default=0, null=True)),
                ('score1', models.IntegerField(default=0, null=True)),
                ('cid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='score_data', to='wibu_catalog.content')),
            ],
        ),
        migrations.AddField(
            model_name='order',
            name='uid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='wibu_catalog.users'),
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('notificationId', models.AutoField(help_text='Naughtyfication id.', primary_key=True, serialize=False)),
                ('message', models.TextField(help_text="Notification's message.", max_length=500, null=True)),
                ('date', models.DateField(help_text="Notification's arrived date.", null=True)),
                ('nType', models.CharField(blank=True, help_text="Notification's type.", max_length=255, null=True)),
                ('isRead', models.BooleanField(default=False, help_text="Notification's is readed by user or not.", null=True)),
                ('uid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='wibu_catalog.users')),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cmt', models.TextField(blank=True, help_text='User comment about the product.', max_length=500, null=True)),
                ('rate', models.IntegerField(blank=True, help_text='User rating of the product.', null=True)),
                ('pid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='wibu_catalog.product')),
                ('uid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='wibu_catalog.users')),
            ],
        ),
        migrations.CreateModel(
            name='FavoriteList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[(1, 'Watching'), (2, 'Completed'), (3, 'On_Hold'), (4, 'Dropped'), (5, 'Re_Watching'), (6, 'Plan_to_Watch')], default='1', help_text='User status with this content.', max_length=1, null=True)),
                ('progress', models.IntegerField(default='0', help_text="User's progress (e.g. chapter01).", null=True)),
                ('cid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favlist', to='wibu_catalog.content')),
                ('uid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favlist', to='wibu_catalog.users')),
            ],
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text="User's comment.", max_length=255, null=True)),
                ('dateOfCmt', models.DateField(blank=True, help_text="Comment's date.", null=True)),
                ('likes', models.IntegerField(default=0, help_text='Number of likes.', null=True)),
                ('cid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='wibu_catalog.content')),
                ('uid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='wibu_catalog.users')),
            ],
        ),
        migrations.CreateModel(
            name='ScoreList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10')], default='10', help_text="User's score of this content.", null=True)),
                ('cid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scoreslist', to='wibu_catalog.content')),
                ('uid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scoreslist', to='wibu_catalog.users')),
            ],
            options={
                'unique_together': {('uid', 'cid')},
            },
        ),
    ]
